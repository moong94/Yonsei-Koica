//
// Grid system
// --------------------------------------------------

// Framework grid generation
// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin make-grid-columns($i: 1, $list: ".xe-col-xs-#{$i}, .xe-col-sm-#{$i}, .xe-col-md-#{$i}, .xe-col-lg-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .xe-col-xs-#{$i}, .xe-col-sm-#{$i}, .xe-col-md-#{$i}, .xe-col-lg-#{$i}";
  }

  #{$list} {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;
    // Inner gutter via padding
    padding-left: ceil(($grid-gutter-width / 2));
    padding-right: floor(($grid-gutter-width / 2));
  }
}

// [converter] This is defined recursively in LESS, but Sass supports real loops
@mixin float-grid-columns($class, $i: 1, $list: ".xe-col-#{$class}-#{$i}") {
  @for $i from (1 + 1) through $grid-columns {
    $list: "#{$list}, .xe-col-#{$class}-#{$i}";
  }

  #{$list} {
    float: left;
  }
}

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .xe-col-#{$class}-#{$index} {
      width: percentage(($index / $grid-columns));
    }
  }

  @if ($type == push) and ($index > 0) {
    .xe-col-#{$class}-push-#{$index} {
      left: percentage(($index / $grid-columns));
    }
  }

  @if ($type == push) and ($index == 0) {
    .xe-col-#{$class}-push-0 {
      left: auto;
    }
  }

  @if ($type == pull) and ($index > 0) {
    .xe-col-#{$class}-pull-#{$index} {
      right: percentage(($index / $grid-columns));
    }
  }

  @if ($type == pull) and ($index == 0) {
    .xe-col-#{$class}-pull-0 {
      right: auto;
    }
  }

  @if ($type == offset) {
    .xe-col-#{$class}-offset-#{$index} {
      margin-left: percentage(($index / $grid-columns));
    }
  }
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.xe-container {
  @include container-fixed;

  @media (min-width: $screen-sm-min) {
    max-width: $container-sm;
  }

  @media (min-width: $screen-md-min) {
    max-width: $container-md;
  }

  @media (min-width: $screen-lg-min) {
    max-width: $container-lg;
  }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.xe-container-fluid {
  @include container-fixed;
}

// Row
//
// Rows contain and clear the floats of your columns.

.xe-row {
  @include make-row;
}

// Columns
//
// Common styles for small and large grid columns

@include make-grid-columns;

// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

@include make-grid(xs);

// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

@media (min-width: $screen-sm-min) {
  @include make-grid(sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

@media (min-width: $screen-md-min) {
  @include make-grid(md);
}

// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

@media (min-width: $screen-lg-min) {
  @include make-grid(lg);
}
